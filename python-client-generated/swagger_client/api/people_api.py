# coding: utf-8

"""
    User Information Service

    FABRIC User Information Service  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: ibaldin@renci.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PeopleApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def people_get(self, **kwargs):  # noqa: E501
        """list of people (open to any valid user)  # noqa: E501

        List of people  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.people_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_name: Search People by Name (ILIKE)
        :return: list[PeopleShort]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.people_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.people_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def people_get_with_http_info(self, **kwargs):  # noqa: E501
        """list of people (open to any valid user)  # noqa: E501

        List of people  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.people_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_name: Search People by Name (ILIKE)
        :return: list[PeopleShort]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['person_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method people_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'person_name' in params:
            query_params.append(('person_name', params['person_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/people', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PeopleShort]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def people_uuid_get(self, uuid, **kwargs):  # noqa: E501
        """person details by UUID (open only to self)  # noqa: E501

        Person details by UUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.people_uuid_get(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: People identifier as UUID (required)
        :return: PeopleLong
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.people_uuid_get_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.people_uuid_get_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def people_uuid_get_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """person details by UUID (open only to self)  # noqa: E501

        Person details by UUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.people_uuid_get_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: People identifier as UUID (required)
        :return: PeopleLong
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method people_uuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `people_uuid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/people/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PeopleLong',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def people_whoami_get(self, **kwargs):  # noqa: E501
        """Details about self from OIDC Claim sub provided in ID token; Creates new entry; (open only to self)  # noqa: E501

        Details about self based on key OIDC Claim sub contained in ID token; Creates new entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.people_whoami_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[PeopleLong]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.people_whoami_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.people_whoami_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def people_whoami_get_with_http_info(self, **kwargs):  # noqa: E501
        """Details about self from OIDC Claim sub provided in ID token; Creates new entry; (open only to self)  # noqa: E501

        Details about self based on key OIDC Claim sub contained in ID token; Creates new entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.people_whoami_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[PeopleLong]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method people_whoami_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/people/whoami', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PeopleLong]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def uuid_oidc_claim_sub_get(self, oidc_claim_sub, **kwargs):  # noqa: E501
        """get person UUID based on their OIDC claim sub (open to any valid user)  # noqa: E501

        person UUID based on their OIDC claim sub  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uuid_oidc_claim_sub_get(oidc_claim_sub, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str oidc_claim_sub: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.uuid_oidc_claim_sub_get_with_http_info(oidc_claim_sub, **kwargs)  # noqa: E501
        else:
            (data) = self.uuid_oidc_claim_sub_get_with_http_info(oidc_claim_sub, **kwargs)  # noqa: E501
            return data

    def uuid_oidc_claim_sub_get_with_http_info(self, oidc_claim_sub, **kwargs):  # noqa: E501
        """get person UUID based on their OIDC claim sub (open to any valid user)  # noqa: E501

        person UUID based on their OIDC claim sub  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uuid_oidc_claim_sub_get_with_http_info(oidc_claim_sub, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str oidc_claim_sub: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['oidc_claim_sub']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method uuid_oidc_claim_sub_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'oidc_claim_sub' is set
        if ('oidc_claim_sub' not in params or
                params['oidc_claim_sub'] is None):
            raise ValueError("Missing the required parameter `oidc_claim_sub` when calling `uuid_oidc_claim_sub_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'oidc_claim_sub' in params:
            query_params.append(('oidc_claim_sub', params['oidc_claim_sub']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/uuid/oidc_claim_sub', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
