# coding: utf-8

"""
    User Information Service

    FABRIC User Information Service  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: ibaldin@renci.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PeopleLong(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'name': 'str',
        'email': 'str',
        'eppn': 'str',
        'oidc_claim_sub': 'str',
        'bastion_login': 'str',
        'prefs': 'Preferences'
    }

    attribute_map = {
        'uuid': 'uuid',
        'name': 'name',
        'email': 'email',
        'eppn': 'eppn',
        'oidc_claim_sub': 'oidc_claim_sub',
        'bastion_login': 'bastion_login',
        'prefs': 'prefs'
    }

    def __init__(self, uuid=None, name=None, email=None, eppn=None, oidc_claim_sub=None, bastion_login=None, prefs=None):  # noqa: E501
        """PeopleLong - a model defined in Swagger"""  # noqa: E501
        self._uuid = None
        self._name = None
        self._email = None
        self._eppn = None
        self._oidc_claim_sub = None
        self._bastion_login = None
        self._prefs = None
        self.discriminator = None
        if uuid is not None:
            self.uuid = uuid
        if name is not None:
            self.name = name
        if email is not None:
            self.email = email
        if eppn is not None:
            self.eppn = eppn
        if oidc_claim_sub is not None:
            self.oidc_claim_sub = oidc_claim_sub
        if bastion_login is not None:
            self.bastion_login = bastion_login
        if prefs is not None:
            self.prefs = prefs

    @property
    def uuid(self):
        """Gets the uuid of this PeopleLong.  # noqa: E501


        :return: The uuid of this PeopleLong.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this PeopleLong.


        :param uuid: The uuid of this PeopleLong.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this PeopleLong.  # noqa: E501


        :return: The name of this PeopleLong.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PeopleLong.


        :param name: The name of this PeopleLong.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def email(self):
        """Gets the email of this PeopleLong.  # noqa: E501


        :return: The email of this PeopleLong.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PeopleLong.


        :param email: The email of this PeopleLong.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def eppn(self):
        """Gets the eppn of this PeopleLong.  # noqa: E501


        :return: The eppn of this PeopleLong.  # noqa: E501
        :rtype: str
        """
        return self._eppn

    @eppn.setter
    def eppn(self, eppn):
        """Sets the eppn of this PeopleLong.


        :param eppn: The eppn of this PeopleLong.  # noqa: E501
        :type: str
        """

        self._eppn = eppn

    @property
    def oidc_claim_sub(self):
        """Gets the oidc_claim_sub of this PeopleLong.  # noqa: E501


        :return: The oidc_claim_sub of this PeopleLong.  # noqa: E501
        :rtype: str
        """
        return self._oidc_claim_sub

    @oidc_claim_sub.setter
    def oidc_claim_sub(self, oidc_claim_sub):
        """Sets the oidc_claim_sub of this PeopleLong.


        :param oidc_claim_sub: The oidc_claim_sub of this PeopleLong.  # noqa: E501
        :type: str
        """

        self._oidc_claim_sub = oidc_claim_sub

    @property
    def bastion_login(self):
        """Gets the bastion_login of this PeopleLong.  # noqa: E501


        :return: The bastion_login of this PeopleLong.  # noqa: E501
        :rtype: str
        """
        return self._bastion_login

    @bastion_login.setter
    def bastion_login(self, bastion_login):
        """Sets the bastion_login of this PeopleLong.


        :param bastion_login: The bastion_login of this PeopleLong.  # noqa: E501
        :type: str
        """

        self._bastion_login = bastion_login

    @property
    def prefs(self):
        """Gets the prefs of this PeopleLong.  # noqa: E501


        :return: The prefs of this PeopleLong.  # noqa: E501
        :rtype: Preferences
        """
        return self._prefs

    @prefs.setter
    def prefs(self, prefs):
        """Sets the prefs of this PeopleLong.


        :param prefs: The prefs of this PeopleLong.  # noqa: E501
        :type: Preferences
        """

        self._prefs = prefs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PeopleLong, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PeopleLong):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
